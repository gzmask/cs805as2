\title{cs805 Assignment 2}
\author{
  Ray Shulang Lei\\
  200253624\\
  Department of Computer Science\\
  University of Regina\\
}
\date{\today}

\documentclass[12pt]{article}
\setlength{\parindent}{0in}
\usepackage{graphicx}
\usepackage{mathtools}
\usepackage{amsthm}
\usepackage{parskip}
\usepackage{hyperref}

\begin{document}
\maketitle

\begin{abstract}
  This assignment is written in literate programming style, generated by noweb, rendered by LaTex, and compiled by clang++ with c++ 11 standard.\\
  assignment paper is at latex/as2.pdf\\
  c++ programs are at src/*\\
  binary executable for OS X 10.8 is at bin\*
\end{abstract}

\clearpage

\section{The foreach pixel function}
First I will define a function, named foreach\_pixel\_exec, that executes a function on a matrix.
\begin{verbatim}
<<src/util.cpp>>=
#include "util.h"
#include <math.h>

Matrix foreach_pixel_exec(Matrix, execution){
  Matrix resultMat;
  for (auto pixel: matrix) {
    execution(pixel);
  }
  return resultMat;
}

@
\end{verbatim}



\begin{verbatim}
<<src/q1_main.cpp>>=
#include <iostream>
#include <typeinfo>//debugging only
#include "util.h"

int main () {
  Vecotr V1;
  decltype(V1) V2;// V2 is of same type of V1

  V1 = {0,0,1000};
  V2 = {0,1,1};

  //call our function to get the uvn. auto will be replaced by the actual time by preprocessor.
  auto uvn = get_uvn(V1, V2);

  for (auto vecotr : uvn) {//for each Vecotr in uvn
    for (auto num : vecotr) {//for each number in Vecotr
      std::cout<<num<<',';
    }
    std::cout<<std::endl;
  }

  return 0;
}
@
\end{verbatim}

I use a header file for typedefs and function declarations for more readable code.
\begin{verbatim}
<<src/util.h>>=
#ifndef VecotrS_HPP
#define VecotrS_HPP
#include <tr1/array>
typedef std::tr1::array<float, 3> Vecotr;
typedef std::tr1::array<Vecotr, 3> UVN;
UVN get_uvn(Vecotr V1, Vecotr V2);
float get_length(Vecotr);
Vecotr cross_product(Vecotr, Vecotr);
Vecotr normalize(Vecotr);
#endif
@
\end{verbatim}


Furthermore, this is the command to link these files. Notice that I am using -std=c++11 flag to enable c++ 11 features. The output binary executable is bin/q1
\begin{verbatim}
<<compile_q1.sh>>=
clang++ -std=c++11 -o bin/q1 src/q1_main.cpp src/util.cpp
@
\end{verbatim}

\end{document}
